/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <ctype.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define deviceAddress 0x55 //direccion para hablar por i2c
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// Mensajes del menú
char msjmenu[] = "------------------Menu de Usuario------------------ \n\n";
char msjmenu0[] = "Elija la opcion que desee que se ejecute \n";
char msjmenu1[] = "1. Controlar dispositivo SPI \n";
char msjmenu2[] = "2. Obtener medicion de Sensor I2C \n";
char msjspi0[] = "---------------Haz seleccionado la opcion 1---------------\n\n";
char msjspi1[] = "Elija la LED a encender y el tiempo en milisegundos seguido de una coma, termine con un punto porfavor\n\n";
char msjspi2[] = "Ejemplo: 1,1500.\n";
char msjerror[] = "Intenta de nuevo.\n";

// Variables del estado
int estado = 0;
char seleccion1[10];  // Buffer para recibir el comando tipo "1,1500"
char seltemp[10];
uint8_t seleccion;
char errorspi[] = "Error: Formato incorrecto.\n";
char successspi[] = "Encendiendo led... \n";
char menu = '0';
int imprimir = 0;
int buffer_index = 0;
int valido = 0;

uint8_t bufferi2c;
uint8_t TX_bufferi2c[] = "0";
uint8_t RX_bufferi2c[4];

int ssppii = 0;
uint8_t cmdspi[10];               // Array de destino como uint8_t
char punto[] = ".";

//uint16_t msjmenu[];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int validarmsjspi(const char *msjspi);
void procesarComandoSPI();
void mandari2c (void);
void mandarspi(void);


void mandarspi(void){
	HAL_GPIO_WritePin(esp32cs_GPIO_Port, esp32cs_Pin, 0);
	//cmdspi = 1;

	for (int i = 0; i < sizeof(seltemp); i++) {
	    cmdspi[i] = (uint8_t*)(seltemp[i]);
	}

    memset(seltemp, 0, sizeof(seltemp));
	HAL_SPI_Transmit(&hspi1, cmdspi, sizeof(cmdspi), HAL_MAX_DELAY);
	HAL_GPIO_WritePin(esp32cs_GPIO_Port, esp32cs_Pin, 1);
	ssppii = 3;
}

void mandari2c (void){
	HAL_I2C_Master_Receive(&hi2c1, (deviceAddress << 1)|0x01, (uint8_t*)RX_bufferi2c, sizeof(RX_bufferi2c), HAL_MAX_DELAY);
	if(RX_bufferi2c[0] == 48){
		RX_bufferi2c[1] = '0';
		RX_bufferi2c[2] = '0';
		RX_bufferi2c[3] = '0';
	}if(RX_bufferi2c[1] == 255){
		RX_bufferi2c[1] = '0';
		RX_bufferi2c[2] = '0';
		RX_bufferi2c[3] = '0';
	}if(RX_bufferi2c[2] == 255){
		RX_bufferi2c[2] = '0';
		RX_bufferi2c[3] = '0';
	}if(RX_bufferi2c[3] == 255){
		RX_bufferi2c[3] = '0';
	}

	HAL_UART_Transmit(&huart2, &RX_bufferi2c[0], 1, 1000);
	HAL_UART_Transmit(&huart2, (uint8_t*)punto, strlen(punto), 1000);
	HAL_UART_Transmit(&huart2, &RX_bufferi2c[1], 1, 1000);
	HAL_UART_Transmit(&huart2, &RX_bufferi2c[2], 1, 1000);
	HAL_UART_Transmit(&huart2, &RX_bufferi2c[3], 1, 1000);

	estado = 0;
	menu = '0';
	imprimir = 0;
}

// Función de validación del formato del comando

int validarmsjspi(const char *msjspi) {
    int len = strlen(msjspi);
    // Verificar longitud mínima (ejemplo "1,100" mínimo)

    if (len < 2){
    	valido =1;
    	return 0;}
    // Verificar que el primer carácter sea '1', '2' o '3'

    if (msjspi[1] < '1' || msjspi[1] > '3'){
    	valido =2;
    	return 0;
    }

    // Verificar que el segundo carácter sea una coma

    if (msjspi[2] != ',') {
    	valido = 3;
    	return 0;
    }

    // Verificar que los caracteres restantes sean numéricos (tiempo en milisegundos)

    for (int i = 3; i < len; i++) {
    	valido = 4;
        if (!isdigit(msjspi[i])) return 0;
    }

    return 1;  // Comando válido
}

// Procesamiento del comando recibido

void procesar_comando() {
    if (validarmsjspi(seleccion1)) {
        HAL_UART_Transmit(&huart2, (uint8_t*)successspi, strlen(successspi), HAL_MAX_DELAY);
        mandarspi();

        // Aquí puedes procesar el comando recibido, por ejemplo:

        // Encender LED, configurar tiempo, etc.

    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)errorspi, strlen(errorspi), HAL_MAX_DELAY);
    }

    // Resetea el buffer después de procesarlo

    memset(seleccion1, 0, sizeof(seleccion1));
    buffer_index = 0;
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (menu == '0' && imprimir == 0) {

	  	            // Cadenas de texto a enviar

	  	     	  imprimir = 1;
	  	     	  seleccion = 0;

	  	     	  //indice = 0;

	  	     	  HAL_UART_Transmit(&huart2, (uint8_t*)msjmenu, strlen(msjmenu), 1000);
	  	     	  HAL_UART_Transmit(&huart2, (uint8_t*)msjmenu0, strlen(msjmenu0), 1000);
	  	     	  HAL_UART_Transmit(&huart2, (uint8_t*)msjmenu1, strlen(msjmenu1), 1000);
	  	     	  HAL_UART_Transmit(&huart2, (uint8_t*)msjmenu2, strlen(msjmenu2), 1000);

	  	 	   // Iniciar recepción por interrupción
	  	     	  HAL_UART_Receive_IT(&huart2, &seleccion, 1);
	  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(esp32cs_GPIO_Port, esp32cs_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : esp32cs_Pin */
  GPIO_InitStruct.Pin = esp32cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(esp32cs_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART2) {  // Asegura que sea la UART correcta
        if(estado == 0) {
        	switch (seleccion) {
            case '1':
                // Transmitir instrucciones
                HAL_UART_Transmit(&huart2, (uint8_t*)msjspi0, strlen(msjspi0), 1000);
                HAL_UART_Transmit(&huart2, (uint8_t*)msjspi1, strlen(msjspi1), 1000);
                HAL_UART_Transmit(&huart2, (uint8_t*)msjspi2, strlen(msjspi2), 1000);
                menu = '0';
                imprimir = 1;
                estado = 1;
                break;

            case '2':
                HAL_UART_Transmit(&huart2, (uint8_t*)"Opcion 2: Control I2C\r\n", 23, HAL_MAX_DELAY);
                mandari2c();

                estado = 0;
                menu = '0';
                imprimir = 0;
                break;

            default:
                HAL_UART_Transmit(&huart2, (uint8_t*)msjerror, strlen(msjerror), 1000);
                menu = '0';
                imprimir = 0;
                estado = 0;
                break;
        }

    }if (estado == 1){


    	if (seleccion != '.') {  // Si no es el delimitador (punto)
    	                    seleccion1[buffer_index++] = seleccion;  // Guarda el byte en el buffer
    	                    seltemp[buffer_index] = seleccion;
    	                } else {
    	                    seleccion1[buffer_index] = '\0';  // Finaliza la cadena con NULL
    	                    //seltemp[] = seleccion1;
    	                    procesar_comando();  // Procesa el comando recibido
    	                    estado = 0;  // Regresa al estado inicial después de procesar
    	                    menu = '0';
    	                    imprimir = 0;
    	                }
    	                HAL_UART_Receive_IT(&huart2, (uint8_t*)&seleccion, 1);  // Continuar recepción

    }else{

        estado = 0;  // Reiniciar estado si ocurre algo inesperado
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&seleccion, 1);  // Continuar recepción
    }
    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
